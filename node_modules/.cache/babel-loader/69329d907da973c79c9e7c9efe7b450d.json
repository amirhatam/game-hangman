{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport axios from \"axios\";\nexport const Dictionary = (setPartOneOfSpeech, setPartTwoOfSpeech, randomWord, setNounDefinition, setNounSynonyms, setNounAntonyms, setVerbDefinition, setVerbSynonyms, setVerbAntonyms) => {\n  _s();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${randomWord}`);\n        let nounSyns = [];\n        let nounAnts = [];\n        let verbSyns = [];\n        let verbAnts = [];\n\n        if (response.status === 200) {\n          const nounData = response.data[0].meanings[0];\n          const verbData = response.data[0].meanings[1]; // console.log(response.data[0].meanings[0].partOfSpeech);\n          // console.log(response.data[0].meanings[1].partOfSpeech);\n          // PartOfSpeech Noun\n\n          nounData.synonyms.map(e => nounSyns.push(e));\n          nounData.antonyms.map(e => nounAnts.push(e));\n          setNounDefinition(nounData.definitions[0].definition);\n          setNounSynonyms(nounSyns);\n          setNounAntonyms(nounAnts);\n          setPartOneOfSpeech(response.data[0].meanings[0].partOfSpeech); // PartOfSpeech Verb\n\n          verbData.synonyms.map(e => verbSyns.push(e));\n          verbData.antonyms.map(e => verbAnts.push(e));\n          setVerbDefinition(verbData.definitions[0].definition);\n          setVerbSynonyms(verbSyns);\n          setVerbAntonyms(verbAnts);\n          setPartTwoOfSpeech(response.data[0].meanings[1].partOfSpeech);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, []);\n  return null;\n};\n\n_s(Dictionary, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Dictionary;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"sources":["C:/Users/amirh/OneDrive/Desktop/GitHub/Pendu/src/componentes/pendu/Dictionary.jsx"],"names":["useEffect","axios","Dictionary","setPartOneOfSpeech","setPartTwoOfSpeech","randomWord","setNounDefinition","setNounSynonyms","setNounAntonyms","setVerbDefinition","setVerbSynonyms","setVerbAntonyms","response","get","nounSyns","nounAnts","verbSyns","verbAnts","status","nounData","data","meanings","verbData","synonyms","map","e","push","antonyms","definitions","definition","partOfSpeech","error","console"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAG,CACtBC,kBADsB,EAEtBC,kBAFsB,EAGtBC,UAHsB,EAItBC,iBAJsB,EAKtBC,eALsB,EAMtBC,eANsB,EAOtBC,iBAPsB,EAQtBC,eARsB,EAStBC,eATsB,KAUrB;AAAA;;AACDX,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,UAAI;AACA,cAAMY,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,sDAAqDR,UAAW,EAA3E,CAAvB;AACA,YAAIS,QAAQ,GAAG,EAAf;AACA,YAAIC,QAAQ,GAAG,EAAf;AACA,YAAIC,QAAQ,GAAG,EAAf;AACA,YAAIC,QAAQ,GAAG,EAAf;;AAEA,YAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AACzB,gBAAMC,QAAQ,GAAGP,QAAQ,CAACQ,IAAT,CAAc,CAAd,EAAiBC,QAAjB,CAA0B,CAA1B,CAAjB;AACA,gBAAMC,QAAQ,GAAGV,QAAQ,CAACQ,IAAT,CAAc,CAAd,EAAiBC,QAAjB,CAA0B,CAA1B,CAAjB,CAFyB,CAGzB;AACA;AACA;;AACAF,UAAAA,QAAQ,CAACI,QAAT,CAAkBC,GAAlB,CAAsBC,CAAC,IAAIX,QAAQ,CAACY,IAAT,CAAcD,CAAd,CAA3B;AACAN,UAAAA,QAAQ,CAACQ,QAAT,CAAkBH,GAAlB,CAAsBC,CAAC,IAAIV,QAAQ,CAACW,IAAT,CAAcD,CAAd,CAA3B;AAEAnB,UAAAA,iBAAiB,CAACa,QAAQ,CAACS,WAAT,CAAqB,CAArB,EAAwBC,UAAzB,CAAjB;AACAtB,UAAAA,eAAe,CAACO,QAAD,CAAf;AACAN,UAAAA,eAAe,CAACO,QAAD,CAAf;AACAZ,UAAAA,kBAAkB,CAACS,QAAQ,CAACQ,IAAT,CAAc,CAAd,EAAiBC,QAAjB,CAA0B,CAA1B,EAA6BS,YAA9B,CAAlB,CAZyB,CAazB;;AACAR,UAAAA,QAAQ,CAACC,QAAT,CAAkBC,GAAlB,CAAsBC,CAAC,IAAIT,QAAQ,CAACU,IAAT,CAAcD,CAAd,CAA3B;AACAH,UAAAA,QAAQ,CAACK,QAAT,CAAkBH,GAAlB,CAAsBC,CAAC,IAAIR,QAAQ,CAACS,IAAT,CAAcD,CAAd,CAA3B;AAEAhB,UAAAA,iBAAiB,CAACa,QAAQ,CAACM,WAAT,CAAqB,CAArB,EAAwBC,UAAzB,CAAjB;AACAnB,UAAAA,eAAe,CAACM,QAAD,CAAf;AACAL,UAAAA,eAAe,CAACM,QAAD,CAAf;AACAb,UAAAA,kBAAkB,CAACQ,QAAQ,CAACQ,IAAT,CAAc,CAAd,EAAiBC,QAAjB,CAA0B,CAA1B,EAA6BS,YAA9B,CAAlB;AACH;AACJ,OA7BD,CA6BE,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,KAjCD;AAkCH,GAnCQ,EAmCN,EAnCM,CAAT;AAqCA,SAAO,IAAP;AACH,CAjDM;;GAAM7B,U;;KAAAA,U","sourcesContent":["import { useEffect } from 'react'\r\nimport axios from \"axios\";\r\n\r\nexport const Dictionary = (\r\n    setPartOneOfSpeech,\r\n    setPartTwoOfSpeech,\r\n    randomWord,\r\n    setNounDefinition,\r\n    setNounSynonyms,\r\n    setNounAntonyms,\r\n    setVerbDefinition,\r\n    setVerbSynonyms,\r\n    setVerbAntonyms\r\n) => {\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const response = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${randomWord}`)\r\n                let nounSyns = []\r\n                let nounAnts = []\r\n                let verbSyns = []\r\n                let verbAnts = []\r\n\r\n                if (response.status === 200) {\r\n                    const nounData = response.data[0].meanings[0]\r\n                    const verbData = response.data[0].meanings[1]\r\n                    // console.log(response.data[0].meanings[0].partOfSpeech);\r\n                    // console.log(response.data[0].meanings[1].partOfSpeech);\r\n                    // PartOfSpeech Noun\r\n                    nounData.synonyms.map(e => nounSyns.push(e))\r\n                    nounData.antonyms.map(e => nounAnts.push(e))\r\n\r\n                    setNounDefinition(nounData.definitions[0].definition)\r\n                    setNounSynonyms(nounSyns)\r\n                    setNounAntonyms(nounAnts)\r\n                    setPartOneOfSpeech(response.data[0].meanings[0].partOfSpeech)\r\n                    // PartOfSpeech Verb\r\n                    verbData.synonyms.map(e => verbSyns.push(e))\r\n                    verbData.antonyms.map(e => verbAnts.push(e))\r\n\r\n                    setVerbDefinition(verbData.definitions[0].definition)\r\n                    setVerbSynonyms(verbSyns)\r\n                    setVerbAntonyms(verbAnts)\r\n                    setPartTwoOfSpeech(response.data[0].meanings[1].partOfSpeech)\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        })();\r\n    }, [])\r\n\r\n    return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}