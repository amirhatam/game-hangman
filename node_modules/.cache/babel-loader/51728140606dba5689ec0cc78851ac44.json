{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amirh\\\\OneDrive\\\\Desktop\\\\GitHub\\\\Pendu\\\\src\\\\views\\\\Pendu.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MDBContainer, MDBCard, MDBCardBody, MDBCardTitle, MDBCol, MDBRow } from 'mdb-react-ui-kit';\n\nconst randomWords = require('random-words');\n\nimport { Playing } from '../componentes/pendu/PlayingCard';\nimport { EndGame } from '../componentes/pendu/EndGameCard';\nimport { setImagesFunc } from '../componentes/pendu/imagesFunc';\nimport { Dictionary } from '../componentes/pendu/Dictionary';\nimport PenduOne from \"../assets/pic/pendu/Le-Pendu-1.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Pendu = () => {\n  _s();\n\n  const [randomWord, setRandomWord] = useState(randomWords);\n  const [numberOfPlay, setNumberOfPlay] = useState(6);\n  const [input, setInput] = useState(\"\");\n  const [lettersChosen, setLettersChosen] = useState([]);\n  const [wordsFound, setWordsFound] = useState([]);\n  const [penduImg, setPenduImg] = useState([PenduOne]); //Dictionary\n\n  const [partOneOfSpeech, setPartOneOfSpeech] = useState([]);\n  const [partTwoOfSpeech, setPartTwoOfSpeech] = useState([]);\n  const [nounDefinition, setNounDefinition] = useState([]);\n  const [nounSynonyms, setNounSynonyms] = useState([]);\n  const [nounAntonyms, setNounAntonyms] = useState([]);\n  const [verbDefinition, setVerbDefinition] = useState([]);\n  const [verbSynonyms, setVerbSynonyms] = useState([]);\n  const [verbAntonyms, setVerbAntonyms] = useState([]); //Message for user \n\n  const [errMsg, setErrMsg] = useState([]);\n  const [errValueMsg, setErrValueMsg] = useState(\"\");\n  const [EndGameMsg, setEndGameMsg] = useState(\"\");\n  const [lettersChosenMsg, setLettersChosenMsg] = useState(\"\"); // let mysteryWord = randomWords();\n\n  if (wordsFound.length === 0) {\n    // Add '_' for each letter of MysteryWord \n    for (let i = 0; i < randomWord.length; i++) {\n      wordsFound.push(\"_\");\n    }\n  }\n\n  Dictionary(setPartOneOfSpeech, setPartTwoOfSpeech, randomWord, setNounDefinition, setNounSynonyms, setNounAntonyms, setVerbDefinition, setVerbSynonyms, setVerbAntonyms); // console.log(\"nounDefinition\", nounDefinition);\n  // console.log(\"nounSynonyms\", nounSynonyms);\n  // console.log(\"nounAntonyms\", nounAntonyms);\n  // console.log(\"verbDefinition\", verbDefinition);\n  // console.log(\"verbSynonyms\", verbSynonyms);\n  // console.log(\"verbAntonyms\", verbAntonyms);\n\n  const findMysteryWord = () => {\n    let numOfPlay = numberOfPlay;\n\n    if (numberOfPlay > 1) {\n      // Condition: gamer still have token\n      if (input.length === 1) {\n        // Condition for separate input value (words & alphabet) \n        if (lettersChosen.indexOf(input) === -1) {\n          //  Condition for Get input value non repeated \n          lettersChosen.push(input);\n          setLettersChosenMsg(\"The letters you entered are : \");\n          setErrMsg(\"\");\n        } else {\n          setErrMsg(\"You've already tried with that letter. I'm not counting this try because I'm nice ;)\");\n          return;\n        }\n\n        if (!randomWord.includes(input)) {\n          numOfPlay--;\n          setNumberOfPlay(numOfPlay);\n          setImagesFunc(numOfPlay, setPenduImg);\n        }\n\n        const result = [];\n\n        if (lettersChosen.length <= 1) {\n          //  Comparison  user input and Mystery Word\n          randomWord.split(\"\").map((e, i) => {\n            if (!wordsFound.length > 0) {\n              if (input.indexOf(e) === -1) {\n                return result.push(\"_\");\n              } else {\n                return result.push(e);\n              }\n            } else {\n              if (input.indexOf(e) === -1) {\n                return result.push(\"_\");\n              } else {\n                return result.push(e);\n              }\n            }\n          });\n        } else {\n          randomWord.split(\"\").map((e, i) => {\n            if (lettersChosen.indexOf(e) === -1) {\n              return result.push(\"_\");\n            } else {\n              return result.push(e);\n            }\n          });\n\n          if (result.join(\"\") === randomWord) {\n            setEndGameMsg(\"Congratulations !! You've won !! The word was: \");\n          }\n        }\n\n        return setWordsFound(result);\n      } else {\n        // Part input value (Word)\n        if (input == randomWord) {\n          setEndGameMsg(\"Congratulations !! You've won !! The word was: \");\n          setNumberOfPlay(numOfPlay);\n        } else {\n          setErrMsg(\"\");\n          numOfPlay--;\n          setErrMsg(`Sorry, MYSTERY WORD was not ${input}`);\n          setNumberOfPlay(numOfPlay);\n        }\n      }\n    } else {\n      // Finished user token\n      setEndGameMsg(`Sorry, you just lost the game, the word was : `);\n    }\n  }; //Rematch\n\n\n  const clearState = async () => {\n    window.location.reload(false); //Refresh a Page\n    // setEndGameMsg(\"\")\n    // setNumberOfPlay(6)\n    // setLettersChosen([])\n    // setWordsFound([])\n    // setPenduImg([PenduOne])\n    // setRandomWord(mysteryWord)\n    // setNounDefinition([])\n    // setNounSynonyms([])\n    // setNounAntonyms([])\n    // setVerbDefinition([])\n    // setVerbSynonyms([])\n    // setVerbAntonyms([])\n  }; //Accept only alphabets values in input \n\n\n  const getInputValue = e => {\n    const userValue = e.target.value.toLowerCase();\n\n    if (userValue.match(/[a-z]/i)) {\n      setInput(userValue);\n      setErrValueMsg(\"\");\n    } else if (userValue && userValue.match(/[a-z]/i) === null) {\n      setErrValueMsg(\"Please enter alphabets only\");\n    } else if (!userValue) {\n      setErrValueMsg(\"\");\n    }\n\n    const btn = document.getElementById('btn');\n    btn.addEventListener('click', function handleClick(event) {\n      //  if you are submitting a form (prevents page reload)\n      event.preventDefault();\n      const formInput = document.getElementById('form'); //  clear input field\n\n      formInput.value = '';\n    });\n  }; // console.log(randomWord);\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    style: {\n      backgroundColor: \"#4B515D\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n      className: \"pb-5\",\n      children: /*#__PURE__*/_jsxDEV(MDBRow, {\n        className: \"justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n          className: \"text-center text-light my-md-5 my-4 display-4\",\n          children: \"Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n          children: /*#__PURE__*/_jsxDEV(MDBCard, {\n            children: /*#__PURE__*/_jsxDEV(MDBCardBody, {\n              children: [/*#__PURE__*/_jsxDEV(MDBCardTitle, {\n                className: \"text-uppercase text-center mb-md-5\",\n                children: \"HANGMAN\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 33\n              }, this), EndGameMsg ? /*#__PURE__*/_jsxDEV(EndGame, {\n                EndGameMsg: EndGameMsg,\n                randomWord: randomWord,\n                clearState: clearState\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(Playing, {\n                getInputValue: getInputValue,\n                findMysteryWord: findMysteryWord,\n                errValueMsg: errValueMsg,\n                errMsg: errMsg,\n                randomWord: randomWord,\n                numberOfPlay: numberOfPlay,\n                penduImg: penduImg,\n                wordsFound: wordsFound,\n                lettersChosenMsg: lettersChosenMsg,\n                lettersChosen: lettersChosen,\n                nounDefinition: nounDefinition,\n                nounSynonyms: nounSynonyms,\n                nounAntonyms: nounAntonyms,\n                verbDefinition: verbDefinition,\n                verbSynonyms: verbSynonyms,\n                verbAntonyms: verbAntonyms,\n                partOneOfSpeech: partOneOfSpeech,\n                partTwoOfSpeech: partTwoOfSpeech\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Pendu, \"JXwqBsywjA3T+S7jNu61l81cO/s=\");\n\n_c = Pendu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pendu\");","map":{"version":3,"sources":["C:/Users/amirh/OneDrive/Desktop/GitHub/Pendu/src/views/Pendu.jsx"],"names":["React","useState","MDBContainer","MDBCard","MDBCardBody","MDBCardTitle","MDBCol","MDBRow","randomWords","require","Playing","EndGame","setImagesFunc","Dictionary","PenduOne","Pendu","randomWord","setRandomWord","numberOfPlay","setNumberOfPlay","input","setInput","lettersChosen","setLettersChosen","wordsFound","setWordsFound","penduImg","setPenduImg","partOneOfSpeech","setPartOneOfSpeech","partTwoOfSpeech","setPartTwoOfSpeech","nounDefinition","setNounDefinition","nounSynonyms","setNounSynonyms","nounAntonyms","setNounAntonyms","verbDefinition","setVerbDefinition","verbSynonyms","setVerbSynonyms","verbAntonyms","setVerbAntonyms","errMsg","setErrMsg","errValueMsg","setErrValueMsg","EndGameMsg","setEndGameMsg","lettersChosenMsg","setLettersChosenMsg","length","i","push","findMysteryWord","numOfPlay","indexOf","includes","result","split","map","e","join","clearState","window","location","reload","getInputValue","userValue","target","value","toLowerCase","match","btn","document","getElementById","addEventListener","handleClick","event","preventDefault","formInput","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { MDBContainer, MDBCard, MDBCardBody, MDBCardTitle, MDBCol, MDBRow } from 'mdb-react-ui-kit';\r\nconst randomWords = require('random-words');\r\nimport { Playing } from '../componentes/pendu/PlayingCard';\r\nimport { EndGame } from '../componentes/pendu/EndGameCard';\r\nimport { setImagesFunc } from '../componentes/pendu/imagesFunc';\r\nimport { Dictionary } from '../componentes/pendu/Dictionary';\r\n\r\n\r\nimport PenduOne from \"../assets/pic/pendu/Le-Pendu-1.png\"\r\n\r\n\r\n\r\nexport const Pendu = () => {\r\n    const [randomWord, setRandomWord] = useState(randomWords)\r\n    const [numberOfPlay, setNumberOfPlay] = useState(6)\r\n    const [input, setInput] = useState(\"\")\r\n    const [lettersChosen, setLettersChosen] = useState([])\r\n    const [wordsFound, setWordsFound] = useState([])\r\n    const [penduImg, setPenduImg] = useState([PenduOne])\r\n\r\n    //Dictionary\r\n    const [partOneOfSpeech, setPartOneOfSpeech] = useState([])\r\n    const [partTwoOfSpeech, setPartTwoOfSpeech] = useState([])\r\n    const [nounDefinition, setNounDefinition] = useState([])\r\n    const [nounSynonyms, setNounSynonyms] = useState([])\r\n    const [nounAntonyms, setNounAntonyms] = useState([])\r\n    const [verbDefinition, setVerbDefinition] = useState([])\r\n    const [verbSynonyms, setVerbSynonyms] = useState([])\r\n    const [verbAntonyms, setVerbAntonyms] = useState([])\r\n\r\n\r\n    //Message for user \r\n    const [errMsg, setErrMsg] = useState([])\r\n    const [errValueMsg, setErrValueMsg] = useState(\"\")\r\n    const [EndGameMsg, setEndGameMsg] = useState(\"\")\r\n    const [lettersChosenMsg, setLettersChosenMsg] = useState(\"\")\r\n\r\n    // let mysteryWord = randomWords();\r\n\r\n    if (wordsFound.length === 0) { // Add '_' for each letter of MysteryWord \r\n        for (let i = 0; i < randomWord.length; i++) {\r\n            wordsFound.push(\"_\")\r\n        }\r\n    }\r\n\r\n    Dictionary(\r\n        setPartOneOfSpeech,\r\n        setPartTwoOfSpeech,\r\n        randomWord,\r\n        setNounDefinition,\r\n        setNounSynonyms,\r\n        setNounAntonyms,\r\n        setVerbDefinition,\r\n        setVerbSynonyms,\r\n        setVerbAntonyms\r\n    )\r\n\r\n\r\n\r\n    // console.log(\"nounDefinition\", nounDefinition);\r\n    // console.log(\"nounSynonyms\", nounSynonyms);\r\n    // console.log(\"nounAntonyms\", nounAntonyms);\r\n    // console.log(\"verbDefinition\", verbDefinition);\r\n    // console.log(\"verbSynonyms\", verbSynonyms);\r\n    // console.log(\"verbAntonyms\", verbAntonyms);\r\n\r\n\r\n\r\n    const findMysteryWord = () => {\r\n        let numOfPlay = numberOfPlay\r\n\r\n        if (numberOfPlay > 1) {  // Condition: gamer still have token\r\n\r\n            if (input.length === 1) { // Condition for separate input value (words & alphabet) \r\n\r\n                if (lettersChosen.indexOf(input) === -1) { //  Condition for Get input value non repeated \r\n                    lettersChosen.push(input)\r\n                    setLettersChosenMsg(\"The letters you entered are : \")\r\n                    setErrMsg(\"\");\r\n                } else {\r\n                    setErrMsg(\"You've already tried with that letter. I'm not counting this try because I'm nice ;)\");\r\n                    return;\r\n                }\r\n                if (!randomWord.includes(input)) {\r\n                    numOfPlay--\r\n                    setNumberOfPlay(numOfPlay)\r\n                    setImagesFunc(numOfPlay, setPenduImg)\r\n                }\r\n\r\n                const result = []\r\n                if (lettersChosen.length <= 1) {      //  Comparison  user input and Mystery Word\r\n                    randomWord.split(\"\").map((e, i) => {\r\n                        if (!wordsFound.length > 0) {\r\n                            if (input.indexOf(e) === -1) {\r\n                                return result.push(\"_\")\r\n                            } else {\r\n                                return result.push(e)\r\n                            }\r\n                        } else {\r\n                            if (input.indexOf(e) === -1) {\r\n                                return result.push(\"_\")\r\n                            } else {\r\n                                return result.push(e)\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                } else {\r\n                    randomWord.split(\"\").map((e, i) => {\r\n                        if (lettersChosen.indexOf(e) === -1) {\r\n                            return result.push(\"_\")\r\n                        } else {\r\n                            return result.push(e)\r\n                        }\r\n\r\n                    })\r\n                    if (result.join(\"\") === randomWord) {\r\n                        setEndGameMsg(\"Congratulations !! You've won !! The word was: \",);\r\n                    }\r\n                }\r\n\r\n                return setWordsFound(result)\r\n\r\n            } else {  // Part input value (Word)\r\n                if (input == randomWord) {\r\n                    setEndGameMsg(\"Congratulations !! You've won !! The word was: \");\r\n                    setNumberOfPlay(numOfPlay)\r\n                } else {\r\n                    setErrMsg(\"\")\r\n                    numOfPlay--\r\n                    setErrMsg(`Sorry, MYSTERY WORD was not ${input}`);\r\n                    setNumberOfPlay(numOfPlay)\r\n                }\r\n            }\r\n\r\n        } else { // Finished user token\r\n            setEndGameMsg(`Sorry, you just lost the game, the word was : `)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //Rematch\r\n    const clearState = async () => {\r\n        window.location.reload(false); //Refresh a Page\r\n        // setEndGameMsg(\"\")\r\n        // setNumberOfPlay(6)\r\n        // setLettersChosen([])\r\n        // setWordsFound([])\r\n        // setPenduImg([PenduOne])\r\n        // setRandomWord(mysteryWord)\r\n        // setNounDefinition([])\r\n        // setNounSynonyms([])\r\n        // setNounAntonyms([])\r\n        // setVerbDefinition([])\r\n        // setVerbSynonyms([])\r\n        // setVerbAntonyms([])\r\n\r\n    }\r\n\r\n    //Accept only alphabets values in input \r\n    const getInputValue = (e) => {\r\n\r\n\r\n\r\n        const userValue = e.target.value.toLowerCase()\r\n        if (userValue.match(/[a-z]/i)) {\r\n            setInput(userValue)\r\n            setErrValueMsg(\"\");\r\n        } else if (userValue && userValue.match(/[a-z]/i) === null) {\r\n            setErrValueMsg(\"Please enter alphabets only\");\r\n        } else if (!userValue) {\r\n            setErrValueMsg(\"\");\r\n        }\r\n\r\n\r\n        const btn = document.getElementById('btn');\r\n\r\n        btn.addEventListener('click', function handleClick(event) {\r\n            //  if you are submitting a form (prevents page reload)\r\n            event.preventDefault();\r\n\r\n            const formInput = document.getElementById('form');\r\n\r\n            //  clear input field\r\n            formInput.value = '';\r\n        });\r\n    }\r\n\r\n    // console.log(randomWord);\r\n\r\n    return (\r\n        <section style={{ backgroundColor: \"#4B515D\" }}>\r\n            <MDBContainer className='pb-5'>\r\n                <MDBRow className='justify-content-center'>\r\n                    <MDBCardTitle className='text-center text-light my-md-5 my-4 display-4'>Game</MDBCardTitle>\r\n                    <MDBCol >\r\n                        <MDBCard >\r\n                            <MDBCardBody>\r\n                                <MDBCardTitle className='text-uppercase text-center mb-md-5'>HANGMAN</MDBCardTitle>\r\n                                {\r\n                                    EndGameMsg\r\n                                        ?\r\n                                        <EndGame\r\n                                            EndGameMsg={EndGameMsg}\r\n                                            randomWord={randomWord}\r\n                                            clearState={clearState}\r\n                                        />\r\n                                        :\r\n                                        < Playing\r\n                                            getInputValue={getInputValue}\r\n                                            findMysteryWord={findMysteryWord}\r\n                                            errValueMsg={errValueMsg}\r\n                                            errMsg={errMsg}\r\n                                            randomWord={randomWord}\r\n                                            numberOfPlay={numberOfPlay}\r\n                                            penduImg={penduImg}\r\n                                            wordsFound={wordsFound}\r\n                                            lettersChosenMsg={lettersChosenMsg}\r\n                                            lettersChosen={lettersChosen}\r\n                                            nounDefinition={nounDefinition}\r\n                                            nounSynonyms={nounSynonyms}\r\n                                            nounAntonyms={nounAntonyms}\r\n                                            verbDefinition={verbDefinition}\r\n                                            verbSynonyms={verbSynonyms}\r\n                                            verbAntonyms={verbAntonyms}\r\n                                            partOneOfSpeech={partOneOfSpeech}\r\n                                            partTwoOfSpeech={partTwoOfSpeech}\r\n                                        />\r\n                                }\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </section>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}